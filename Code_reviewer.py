{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOv92dfhrjYn7CHS+0cd+iH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JunjieWu100/Junjie/blob/main/Code_reviewer.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 719
        },
        "id": "sCzsrZgEdm5f",
        "outputId": "06ac3933-5483-4b3b-b053-7063a9bc9f13"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üìÅ Upload a Python script to explain/review (.py)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0376a05b-e081-483d-ad66-75cdd6543120\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0376a05b-e081-483d-ad66-75cdd6543120\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving chat_Wrapper.py to chat_Wrapper.py\n",
            "‚úÖ Uploaded: chat_Wrapper.py\n",
            "üß† Split into 1 code blocks.\n",
            "\n",
            "=== üß© Code Chunk 1 ===\n",
            "\n",
            "# === 1. Install Required Libraries ===\n",
            "!pip install -q openai tiktoken\n",
            "\n",
            "# === 2. Imports ===\n",
            "import openai\n",
            "import re\n",
            "from google.colab import files\n",
            "\n",
            "# === 3. Set OpenAI API Key (Insecure for quick testing)\n",
            "openai.api_key = \"sk-proj-RCiM6pOSBBqyLrkocDFgMZdSzULNzg6TEWkiRQHl6LKCMggwB4xnRdpBZi5yFG2huwU\n",
            "...\n",
            "\n",
            "üí¨ GPT Review:\n",
            "### Explanation\n",
            "This Python script is a simple program that interacts with the OpenAI API to generate responses to helpdesk questions. It first installs the required libraries, imports necessary modules, sets the OpenAI API key, uploads helpdesk documents, combines and cleans the text, prompts the user for a helpdesk question, injects context into a prompt, calls the OpenAI API to get a response, and finally displays the helpdesk response.\n",
            "\n",
            "### Possible Bugs or Improvements\n",
            "1. **Insecure API Key**: The API key is hardcoded in the script, which is insecure. It's recommended to use environment variables or a configuration file to store sensitive information like API keys.\n",
            "2. **Error Handling**: The script lacks error handling. It should include try-except blocks to handle potential exceptions during file reading, API calls, etc.\n",
            "3. **Input Validation**: The script assumes correct input from the user without any validation. It should validate user inputs to prevent unexpected behavior.\n",
            "4. **Magic Numbers**: Magic numbers like `temperature=0.2` and `max_tokens=500` should be defined as constants with meaningful names for better readability.\n",
            "5. **Documentation**: Adding comments to explain the purpose of each section of the code would improve readability and maintainability.\n",
            "\n",
            "### Best Practice Suggestions\n",
            "1. **Separation of Concerns**: Consider breaking down the script into functions or classes to improve readability and maintainability.\n",
            "2. **Code Reusability**: Identify reusable parts of the code and refactor them into functions to promote code reusability.\n",
            "3. **Virtual Environment**: Use a virtual environment to manage dependencies and avoid conflicts with other projects.\n",
            "4. **Logging**: Incorporate logging to track the execution flow and potential issues during script execution.\n",
            "5. **Code Formatting**: Follow PEP 8 guidelines for code formatting to enhance code consistency.\n"
          ]
        }
      ],
      "source": [
        "# === 1. Install Required Dependencies ===\n",
        "!pip install -q openai\n",
        "\n",
        "# === 2. Imports ===\n",
        "import openai\n",
        "import re\n",
        "import os\n",
        "from google.colab import files\n",
        "\n",
        "# === 3. Set Your OpenAI API Key (Insecure for quick demo) ===\n",
        "openai.api_key = \"\"  # Replace with your key\n",
        "\n",
        "# === 4. Upload a Python File ===\n",
        "print(\"üìÅ Upload a Python script to explain/review (.py)\")\n",
        "uploaded = files.upload()\n",
        "filename = next(iter(uploaded))\n",
        "print(f\"‚úÖ Uploaded: {filename}\")\n",
        "\n",
        "# === 5. Read and Clean Code ===\n",
        "with open(filename, \"r\", encoding=\"utf-8\") as f:\n",
        "    code = f.read()\n",
        "\n",
        "# Optional cleanup\n",
        "code = re.sub(r'\\n\\s*\\n', '\\n\\n', code).strip()\n",
        "\n",
        "# === 6. Chunk Code by Functions/Classes ===\n",
        "def split_code_into_chunks(code):\n",
        "    chunks = []\n",
        "    current = []\n",
        "    lines = code.splitlines()\n",
        "    for line in lines:\n",
        "        if re.match(r'^\\s*(def|class)\\s', line) and current:\n",
        "            chunks.append('\\n'.join(current))\n",
        "            current = [line]\n",
        "        else:\n",
        "            current.append(line)\n",
        "    if current:\n",
        "        chunks.append('\\n'.join(current))\n",
        "    return chunks\n",
        "\n",
        "chunks = split_code_into_chunks(code)\n",
        "print(f\"üß† Split into {len(chunks)} code blocks.\")\n",
        "\n",
        "# === 7. Build and Send Prompt per Chunk ===\n",
        "system_prompt = \"You are a senior Python engineer. Read the code and provide:\\n- A short explanation of what it does\\n- Possible bugs or improvements\\n- Best practice suggestions\\n\"\n",
        "\n",
        "for i, chunk in enumerate(chunks):\n",
        "    print(f\"\\n=== üß© Code Chunk {i+1} ===\\n\")\n",
        "    print(chunk[:300] + (\"\\n...\" if len(chunk) > 300 else \"\"))\n",
        "\n",
        "    user_prompt = f\"Review the following Python code:\\n\\n```python\\n{chunk}\\n```\"\n",
        "\n",
        "    response = openai.chat.completions.create(\n",
        "        model=\"gpt-3.5-turbo\",\n",
        "        messages=[\n",
        "            {\"role\": \"system\", \"content\": system_prompt},\n",
        "            {\"role\": \"user\", \"content\": user_prompt}\n",
        "        ],\n",
        "        temperature=0.2,\n",
        "        max_tokens=600\n",
        "    )\n",
        "\n",
        "    explanation = response.choices[0].message.content.strip()\n",
        "    print(f\"\\nüí¨ GPT Review:\\n{explanation}\")\n"
      ]
    }
  ]
}