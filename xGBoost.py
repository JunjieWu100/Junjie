{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNV2LKFXBiLUWFx4i6GpydM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JunjieWu100/Junjie/blob/main/xGBoost.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T_0t_mhoUw9g",
        "outputId": "9b487d5b-254e-4758-fa5a-262603575c6b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (3.0.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.0.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.16.0)\n",
            "‚úÖ Model A RMSE: 2.316 goals\n",
            "‚úÖ Model B RMSE: 2.210 goals\n",
            "\n",
            "‚öΩ Predicted goals:\n",
            "Team A: 1.18\n",
            "Team B: 3.51\n"
          ]
        }
      ],
      "source": [
        "# üì¶ Install XGBoost\n",
        "!pip install xgboost\n",
        "\n",
        "# üìö Imports\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# üé≤ Set seed for reproducibility\n",
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "\n",
        "# üîß 1. Generate Simulated Training Data\n",
        "def generate_data(n=300):\n",
        "    rows = []\n",
        "    for _ in range(n):\n",
        "        elo_A = np.random.randint(1500, 1600)\n",
        "        elo_B = np.random.randint(1500, 1600)\n",
        "        home = np.random.choice([0, 1])\n",
        "\n",
        "        atk_A = np.random.normal(70, 5)\n",
        "        def_B = np.random.normal(70, 5)\n",
        "        gk_B  = np.random.normal(70, 3)\n",
        "\n",
        "        atk_B = np.random.normal(70, 5)\n",
        "        def_A = np.random.normal(70, 5)\n",
        "        gk_A  = np.random.normal(70, 3)\n",
        "\n",
        "        # Team stats (simulated)\n",
        "        stats_A = {\n",
        "            'shots': np.random.uniform(8, 28),\n",
        "            'possession': np.random.uniform(40, 65),\n",
        "            'xG': np.random.uniform(2.0, 5.0)\n",
        "        }\n",
        "        stats_B = {\n",
        "            'shots': np.random.uniform(8, 28),\n",
        "            'possession': np.random.uniform(40, 65),\n",
        "            'xG': np.random.uniform(2.0, 5.0)\n",
        "        }\n",
        "\n",
        "        # Simulated goal generation\n",
        "        elo_diff = elo_A - elo_B\n",
        "        lambda_A = stats_A['xG'] + 0.01 * elo_diff + 0.03 * (atk_A - def_B) - 0.01 * (gk_B - 70)\n",
        "        lambda_B = stats_B['xG'] - 0.01 * elo_diff + 0.03 * (atk_B - def_A) - 0.01 * (gk_A - 70)\n",
        "\n",
        "        goals_A = np.random.poisson(max(lambda_A, 0.2))\n",
        "        goals_B = np.random.poisson(max(lambda_B, 0.2))\n",
        "\n",
        "        rows.append([\n",
        "            elo_A, elo_B, elo_diff, home,\n",
        "            atk_A, def_B, gk_B,\n",
        "            stats_A['shots'], stats_A['possession'], stats_A['xG'],\n",
        "            goals_A,\n",
        "            atk_B, def_A, gk_A,\n",
        "            stats_B['shots'], stats_B['possession'], stats_B['xG'],\n",
        "            goals_B\n",
        "        ])\n",
        "\n",
        "    cols = [\n",
        "        'elo_A', 'elo_B', 'elo_diff', 'home',\n",
        "        'atk_A', 'def_B', 'gk_B',\n",
        "        'shots_A', 'poss_A', 'xG_A',\n",
        "        'goals_A',\n",
        "        'atk_B', 'def_A', 'gk_A',\n",
        "        'shots_B', 'poss_B', 'xG_B',\n",
        "        'goals_B'\n",
        "    ]\n",
        "    return pd.DataFrame(rows, columns=cols)\n",
        "\n",
        "df = generate_data()\n",
        "\n",
        "# üß† 2. Define Features and Train Models\n",
        "features_A = ['elo_A', 'elo_B', 'elo_diff', 'home',\n",
        "              'atk_A', 'def_B', 'gk_B',\n",
        "              'shots_A', 'poss_A', 'xG_A']\n",
        "\n",
        "features_B = ['elo_A', 'elo_B', 'elo_diff', 'home',\n",
        "              'atk_B', 'def_A', 'gk_A',\n",
        "              'shots_B', 'poss_B', 'xG_B']\n",
        "\n",
        "X_A = df[features_A]\n",
        "y_A = df['goals_A']\n",
        "X_B = df[features_B]\n",
        "y_B = df['goals_B']\n",
        "\n",
        "X_A_train, X_A_test, y_A_train, y_A_test = train_test_split(X_A, y_A, test_size=0.2, random_state=SEED)\n",
        "X_B_train, X_B_test, y_B_train, y_B_test = train_test_split(X_B, y_B, test_size=0.2, random_state=SEED)\n",
        "\n",
        "model_A = XGBRegressor(random_state=SEED)\n",
        "model_B = XGBRegressor(random_state=SEED)\n",
        "model_A.fit(X_A_train, y_A_train)\n",
        "model_B.fit(X_B_train, y_B_train)\n",
        "\n",
        "# üìä 3. Evaluate Models\n",
        "rmse_A = np.sqrt(mean_squared_error(y_A_test, model_A.predict(X_A_test)))\n",
        "rmse_B = np.sqrt(mean_squared_error(y_B_test, model_B.predict(X_B_test)))\n",
        "print(f\"‚úÖ Model A RMSE: {rmse_A:.3f} goals\")\n",
        "print(f\"‚úÖ Model B RMSE: {rmse_B:.3f} goals\")\n",
        "\n",
        "# ‚úçÔ∏è 4. INPUT DATA ‚Äî Replace with real stats\n",
        "\n",
        "# --- TEAM A INPUTS ---\n",
        "team_A = {\n",
        "    'elo': 1584,\n",
        "    'atk': 70.0,\n",
        "    'shots': 12.0,\n",
        "    'poss': 53.0,\n",
        "    'xG': 1.653\n",
        "}\n",
        "\n",
        "# --- TEAM B INPUTS ---\n",
        "team_B = {\n",
        "    'elo': 1601,\n",
        "    'atk': 70.0,\n",
        "    'shots': 8.0,\n",
        "    'poss': 47.0,\n",
        "    'xG': 1.857\n",
        "}\n",
        "\n",
        "# --- SHARED CONTEXT ---\n",
        "shared = {\n",
        "    'home': 1,        # 1 if Team A is home, 0 otherwise\n",
        "    'def_A': 70.0,\n",
        "    'def_B': 70.0,\n",
        "    'gk_A': 70.0,\n",
        "    'gk_B': 70.0\n",
        "}\n",
        "\n",
        "# --- Assemble DataFrames for Prediction ---\n",
        "\n",
        "input_A = pd.DataFrame([{\n",
        "    'elo_A': team_A['elo'],\n",
        "    'elo_B': team_B['elo'],\n",
        "    'elo_diff': team_A['elo'] - team_B['elo'],\n",
        "    'home': shared['home'],\n",
        "    'atk_A': team_A['atk'],\n",
        "    'def_B': shared['def_B'],\n",
        "    'gk_B': shared['gk_B'],\n",
        "    'shots_A': team_A['shots'],\n",
        "    'poss_A': team_A['poss'],\n",
        "    'xG_A': team_A['xG']\n",
        "}])\n",
        "\n",
        "input_B = pd.DataFrame([{\n",
        "    'elo_A': team_A['elo'],\n",
        "    'elo_B': team_B['elo'],\n",
        "    'elo_diff': team_A['elo'] - team_B['elo'],\n",
        "    'home': shared['home'],\n",
        "    'atk_B': team_B['atk'],\n",
        "    'def_A': shared['def_A'],\n",
        "    'gk_A': shared['gk_A'],\n",
        "    'shots_B': team_B['shots'],\n",
        "    'poss_B': team_B['poss'],\n",
        "    'xG_B': team_B['xG']\n",
        "}])\n",
        "\n",
        "\n",
        "# üîÆ 5. Predict Goals for Both Teams\n",
        "pred_A = model_A.predict(input_A)[0]\n",
        "pred_B = model_B.predict(input_B)[0]\n",
        "\n",
        "print(f\"\\n‚öΩ Predicted goals:\")\n",
        "print(f\"Team A: {pred_A:.2f}\")\n",
        "print(f\"Team B: {pred_B:.2f}\")\n"
      ]
    }
  ]
}